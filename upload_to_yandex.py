import os
import json
import boto3
from pathlib import Path
from concurrent.futures import ThreadPoolExecutor, as_completed
from typing import Dict, List, Tuple, Set

# === Cloudflare R2 ===
ACCOUNT_ID  = "d7f7fb252f6479e65b7ab681afff1dde"
ACCESS_KEY  = "be4ccf2da6d742d7095a3058b89d2b81"
SECRET_KEY  = "198c024b661b5d70aa21dd36abebaf546ff64f581f4f8cdcf7fcc78e075fdf12"
BUCKET_NAME = "nikatravel-photos"
PUBLIC_URL  = "https://pub-d2bcce88ffcd45f692cd5ee867c9eeda.r2.dev"

# === Paths ===
BASE_DIR    = Path(__file__).resolve().parent
IMG_DIR     = BASE_DIR / "static" / "img"
FILTER_FILE = BASE_DIR / "data" / "filter.json"

# === S3 client ===
session = boto3.session.Session()
s3 = session.client(
    "s3",
    endpoint_url=f"https://{ACCOUNT_ID}.r2.cloudflarestorage.com",
    aws_access_key_id=ACCESS_KEY,
    aws_secret_access_key=SECRET_KEY,
)

def list_all_keys(bucket: str, prefix: str = "") -> Set[str]:
    """–ü–æ–ª—É—á–∏—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≤—Å–µ—Ö –∫–ª—é—á–µ–π –≤ –±–∞–∫–µ—Ç–µ (–±—ã—Å—Ç—Ä–æ–µ –ø–æ—Å–ª–µ–¥—É—é—â–µ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ)."""
    keys: Set[str] = set()
    token = None
    while True:
        kwargs = {"Bucket": bucket, "MaxKeys": 1000}
        if prefix:
            kwargs["Prefix"] = prefix
        if token:
            kwargs["ContinuationToken"] = token
        resp = s3.list_objects_v2(**kwargs)
        for obj in resp.get("Contents", []):
            keys.add(obj["Key"])
        if resp.get("IsTruncated"):
            token = resp.get("NextContinuationToken")
        else:
            break
    return keys

def is_url(s: str) -> bool:
    return isinstance(s, str) and (s.startswith("http://") or s.startswith("https://"))

def collect_needed_files(tours: List[dict]) -> Set[str]:
    """
    –°–æ–±–∏—Ä–∞–µ–º –í–°–ï –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ (basename) –∏–∑ image –∏ gallery, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï URL.
    """
    needed: Set[str] = set()
    for t in tours:
        img = t.get("image")
        if isinstance(img, str) and not is_url(img):
            needed.add(os.path.basename(img))
        for g in t.get("gallery", []):
            if isinstance(g, str) and not is_url(g):
                needed.add(os.path.basename(g))
    return needed

def upload_one(local_file: Path, remote_name: str) -> Tuple[str, bool, str]:
    try:
        s3.upload_file(str(local_file), BUCKET_NAME, remote_name)
        return remote_name, True, f"{PUBLIC_URL}/{remote_name}"
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {local_file.name}: {e}")
        return remote_name, False, ""

def update_filter_json(max_workers: int = 10):
    if not FILTER_FILE.exists():
        print("‚ùå filter.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    with open(FILTER_FILE, "r", encoding="utf-8") as f:
        tours = json.load(f)

    # 1) –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç—Ä–µ–±—É–µ–º—ã–µ –Ω–µ-URL —Ñ–∞–π–ª—ã –∏–∑ JSON
    needed_files = collect_needed_files(tours)
    if not needed_files:
        print("‚èπ –í JSON –Ω–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π –¥–ª—è –∑–∞–º–µ–Ω—ã (–≤—Å—ë —É–∂–µ URL?).")
        return

    local_files = set(os.listdir(IMG_DIR))
    print(f"üìÇ –õ–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(local_files)} | –ù—É–∂–Ω—ã –∏–∑ JSON: {len(needed_files)}")

    # 2) –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏ –≤ –±–∞–∫–µ—Ç–µ (–º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–ø—É—Å–∫)
    existing_keys = list_all_keys(BUCKET_NAME)
    print(f"‚òÅÔ∏è  –£–∂–µ –≤ R2: {len(existing_keys)} –∫–ª—é—á–µ–π")

    # 3) –ì–æ—Ç–æ–≤–∏–º —Å–ø–∏—Å–æ–∫ –∫ –∑–∞–≥—Ä—É–∑–∫–µ –∏ –∫–∞—Ä—Ç—É —É–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö URL
    to_upload: List[Tuple[Path, str]] = []
    url_map: Dict[str, str] = {}  # filename -> public URL

    for fname in sorted(needed_files):
        if fname not in local_files:
            print(f"‚ö† –õ–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ—Ç: {fname} (–ø—Ä–æ–ø—É—Å–∫–∞—é)")
            continue
        if fname in existing_keys:
            url_map[fname] = f"{PUBLIC_URL}/{fname}"
        else:
            to_upload.append((IMG_DIR / fname, fname))

    print(f"üöÄ –ö –∑–∞–≥—Ä—É–∑–∫–µ: {len(to_upload)} | –£–∂–µ –µ—Å—Ç—å: {len(url_map)}")

    # 4) –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö
    if to_upload:
        with ThreadPoolExecutor(max_workers=max_workers) as ex:
            futures = [ex.submit(upload_one, lf, rn) for lf, rn in to_upload]
            for fut in as_completed(futures):
                remote_name, ok, url = fut.result()
                if ok and url:
                    url_map[os.path.basename(remote_name)] = url
                    existing_keys.add(remote_name)

    # 5) –û–±–Ω–æ–≤–ª—è–µ–º JSON: –∑–∞–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —Å—Ç—Ä–æ–∫–∏, —á—Ç–æ –Ω–µ URL –∏ —á—å–∏ basename –µ—Å—Ç—å –≤ url_map
    changed = 0
    for t in tours:
        # image
        img = t.get("image")
        if isinstance(img, str) and not is_url(img):
            base = os.path.basename(img)
            new_url = url_map.get(base)
            if new_url and new_url != img:
                t["image"] = new_url
                changed += 1

        # gallery
        gallery = t.get("gallery", [])
        new_gallery = []
        replaced_here = False
        for g in gallery:
            if isinstance(g, str) and not is_url(g):
                base = os.path.basename(g)
                new_url = url_map.get(base, g)
                if new_url != g:
                    replaced_here = True
                new_gallery.append(new_url)
            else:
                new_gallery.append(g)
        if replaced_here:
            t["gallery"] = new_gallery
            changed += 1

    if changed > 0:
        with open(FILTER_FILE, "w", encoding="utf-8") as f:
            json.dump(tours, f, ensure_ascii=False, indent=2)
        print(f"‚úÖ filter.json –æ–±–Ω–æ–≤–ª—ë–Ω. –ó–∞–º–µ–Ω–µ–Ω–æ –ø–æ–ª–µ–π: {changed}")
    else:
        print("‚èπ –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç ‚Äî –Ω–µ—á–µ–≥–æ –±—ã–ª–æ –∑–∞–º–µ–Ω—è—Ç—å.")

def cleanup_uploaded_images(json_path="data/filter.json", img_folder="static/img"):
    with open(json_path, "r", encoding="utf-8") as f:
        tours = json.load(f)

    used_files = set()
    for t in tours:
        img = t.get("image")
        if isinstance(img, str) and not is_url(img):
            used_files.add(os.path.basename(img))
        for g in t.get("gallery", []):
            if isinstance(g, str) and not is_url(g):
                used_files.add(os.path.basename(g))

    for file in os.listdir(img_folder):
        if file in used_files:
            continue
        path = os.path.join(img_folder, file)
        if os.path.isfile(path):
            os.remove(path)
            print(f"üóë –£–¥–∞–ª–µ–Ω–æ: {file}")

if __name__ == "__main__":
    update_filter_json(max_workers=10)
