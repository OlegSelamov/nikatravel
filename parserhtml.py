from bs4 import BeautifulSoup
import json
import logging
import os
import re
from pathlib import Path
from datetime import datetime

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
DATA_DIR = Path(BASE_DIR) / "data"

logger = logging.getLogger("parser_logger")
logger.setLevel(logging.INFO)
LOG_FILE = os.path.join(BASE_DIR, "parser.log")
file_handler = logging.FileHandler(LOG_FILE, encoding="utf-8")
formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")
file_handler.setFormatter(formatter)
if not logger.hasHandlers():
    logger.addHandler(file_handler)

# ----------------------- –£–¢–ò–õ–ò–¢–´ –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–ò/–ö–õ–Æ–ß–ê -----------------------

def normalize_str(x):
    if x is None:
        return ""
    s = str(x).strip()
    s = " ".join(s.split())
    return s.lower()

def parse_date_any(s):
    s = str(s).strip()
    for fmt in ("%d.%m.%Y", "%Y-%m-%d", "%d/%m/%Y"):
        try:
            return datetime.strptime(s, fmt)
        except ValueError:
            pass
    # –µ—Å–ª–∏ –ø–æ–ø–∞–ª–æ—Å—å "13.08.2025, —Å—Ä" ‚Äî –æ—Ç—Ä–µ–∂–µ–º –≤—Å—ë –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –∑–∞–ø—è—Ç–æ–π –∏ –µ—â—ë —Ä–∞–∑
    s2 = s.split(",", 1)[0].strip()
    if s2 != s:
        for fmt in ("%d.%m.%Y", "%Y-%m-%d", "%d/%m/%Y"):
            try:
                return datetime.strptime(s2, fmt)
            except ValueError:
                pass
    raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É: {s}")

def date_to_standard_str(dt: datetime) -> str:
    return dt.strftime("%d.%m.%Y")

def normalize_date_to_standard(s):
    try:
        return date_to_standard_str(parse_date_any(s))
    except Exception:
        return None

def make_key(rec: dict) -> str:
    """–ö–ª—é—á —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç—É—Ä–∞: —Å—Ç—Ä–∞–Ω–∞|–≥–æ—Ä–æ–¥|–æ—Ç–µ–ª—å|–ø–∏—Ç–∞–Ω–∏–µ|–Ω–æ—á–µ–π"""
    return "|".join([
        normalize_str(rec.get("country", "")),
        normalize_str(rec.get("city", "")),
        normalize_str(rec.get("hotel", "")),
        normalize_str(rec.get("meal", "")),
        normalize_str(rec.get("nights", "")),
    ])

def recompute_primary_price(rec: dict) -> None:
    """–ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º rec['price'] –∫–∞–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∏–∑ dates_prices (–µ—Å–ª–∏ –µ—Å—Ç—å)."""
    dps = rec.get("dates_prices") or []
    prices = []
    for x in dps:
        p = str(x.get("price", "")).replace(" ", "")
        if p.isdigit():
            prices.append(int(p))
    if prices:
        rec["price"] = str(min(prices))

# ----------------------- –ù–ê–•–û–î–ò–ú –ü–û–°–õ–ï–î–ù–Æ–Æ –ü–ê–ü–ö–£ HTML -----------------------

# –ù–∞–π–¥–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–∞–ø–∫—É html_*
html_folders = [p for p in DATA_DIR.glob("html_*") if p.is_dir()]
if not html_folders:
    raise FileNotFoundError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ –æ–¥–Ω–∞ –ø–∞–ø–∫–∞ html_*")
last_folder = max(html_folders, key=os.path.getmtime)
logger.info(f"üìÇ –ü–∞—Ä—Å–∏–º HTML –∏–∑ –ø–∞–ø–∫–∏: {last_folder}")

# –õ–∏–º–∏—Ç
try:
    with open(DATA_DIR / "kazunion_config.json", "r", encoding="utf-8") as f:
        config = json.load(f)
        limit = int(config.get("limit")) if str(config.get("limit")).isdigit() else None
except Exception:
    limit = None

# ----------------------- –ó–ê–ì–†–£–ó–ö–ê –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –î–ê–ù–ù–´–• -----------------------

filter_path = DATA_DIR / "filter.json"

def ensure_dates_prices_standard(rec: dict) -> None:
    """–ü—Ä–∏–≤–æ–¥–∏–º dates_prices –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É –∏ —É–±–∏—Ä–∞–µ–º –±–∏—Ç—ã–µ –¥–∞—Ç—ã."""
    dps = rec.get("dates_prices") or []
    std = []
    for dp in dps:
        if not isinstance(dp, dict):
            continue
        d = normalize_date_to_standard(dp.get("date"))
        if not d:
            continue
        std.append({"date": d, "price": str(dp.get("price", ""))})
    rec["dates_prices"] = std

existing_list = []
if filter_path.exists():
    try:
        with open(filter_path, "r", encoding="utf-8") as f:
            existing_list = json.load(f)
        if not isinstance(existing_list, list):
            existing_list = []
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è filter.json: {e}")
        existing_list = []

# –ò–Ω–¥–µ–∫—Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç—É—Ä–æ–≤ –ø–æ —Å–ª–æ–∂–Ω–æ–º—É –∫–ª—é—á—É
existing_index = {}
for rec in existing_list:
    ensure_dates_prices_standard(rec)
    existing_index[make_key(rec)] = rec

# ----------------------- –ü–ê–†–°–ò–ù–ì HTML -----------------------

hotels_parsed = []  # –±—É–¥–µ–º —Å–∫–ª–∞–¥—ã–≤–∞—Ç—å —Å–≤–µ–∂–∏–µ –∑–∞–ø–∏—Å–∏ –ø–µ—Ä–µ–¥ –º–µ—Ä–¥–∂–µ–º
html_files = sorted(last_folder.glob("kazunion_page_*.html"))
logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(html_files)} HTML-—Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")

count_added_rows = 0

for html_file in html_files:
    logger.info(f"üìÑ –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª: {html_file}")
    with open(html_file, "r", encoding="utf-8") as f:
        soup = BeautifulSoup(f, "html.parser")

    rows = soup.find_all("tr")
    for row in rows:
        tds = row.find_all("td")
        if len(tds) < 14:
            continue
        try:
            date_raw = tds[1].get_text(strip=True)
            country_city_raw = tds[2].get_text(strip=True)
            nights_raw = tds[3].get_text(strip=True)

            # –ï—Å–ª–∏ –¥–≤–µ —Ü–∏—Ñ—Ä—ã –ø–æ–¥—Ä—è–¥, —Å—É–º–º–∏—Ä—É–µ–º (–Ω–∞—Å–ª–µ–¥—É–µ–º —Ç–≤–æ—ë –ø—Ä–∞–≤–∏–ª–æ)
            if len(nights_raw) == 2 and nights_raw.isdigit():
                nights = str(int(nights_raw[0]) + int(nights_raw[1]))
            else:
                nights = nights_raw

            hotel_name_raw = tds[4].get_text(strip=True)
            seats = tds[5].get_text(strip=True)

            meal_raw = tds[6].get_text(strip=True).upper()
            meal_map = {
                "AI": "AI",
                "ALL INCLUSIVE": "AI",
                "BB": "BB",
                "BED & BREAKFAST": "BB",
                "FB": "FB",
                "FULL BOARD": "FB",
                "HB": "HB",
                "HALF BOARD": "HB",
                "RO": "RO",
                "ROOM ONLY": "RO",
                "UAI": "UAI",
                "ULTRA ALL INCLUSIVE": "UAI"
            }
            meal = meal_map.get(meal_raw, "BB")

            price_raw = tds[10].get_text(strip=True)

            if not date_raw or not hotel_name_raw or not price_raw or "KZT" not in price_raw:
                continue
            parts = country_city_raw.split(" –∏–∑ ")
            if len(parts) != 2:
                continue

            destination_raw, departure_city_raw = parts

            # –ß–∏—Å—Ç–∏–º –≥–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞
            city = re.sub(r"\s*\(.*?\)", "", departure_city_raw)
            city = re.sub(r"(Air\s*Astana|SPO\s*NEW|SPO|FN|Standard)", "", city, flags=re.IGNORECASE)
            city = re.sub(r"[.,\-]", "", city)
            city = re.sub(r"\d+", "", city)
            city = re.sub(r"[A-Za-z]+", "", city)
            city = re.sub(r"\s+", " ", city).strip()

            # –ß–∏—Å—Ç–∏–º —Å—Ç—Ä–∞–Ω—É/–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            destination_clean = re.sub(r"\s*\(.*?\)", "", destination_raw)
            destination_clean = destination_clean.split("+")[0]
            destination_clean = re.sub(r"[.,\-]", "", destination_clean)
            destination_clean = re.sub(r"\d+", "", destination_clean)
            destination_clean = re.sub(r"[A-Za-z]+", "", destination_clean)
            destination_clean = re.sub(r"\s+", " ", destination_clean).strip()

            destination_to_country = {
                # –ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω
                "–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω": "–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω",
                # –í—å–µ—Ç–Ω–∞–º
                "–î–∞–Ω–∞–Ω–≥": "–í—å–µ—Ç–Ω–∞–º",
                "–ù—è—á–∞–Ω–≥": "–í—å–µ—Ç–Ω–∞–º",
                "–•–æ–π–∞–Ω": "–í—å–µ—Ç–Ω–∞–º",
                "–ö–∞–º—Ä–∞–Ω—å": "–í—å–µ—Ç–Ω–∞–º",
                "–•—é—ç": "–í—å–µ—Ç–Ω–∞–º",
                "–§—É–∫—É–æ–∫": "–í—å–µ—Ç–Ω–∞–º",
                "–•–æ—à–∏–º–∏–Ω": "–í—å–µ—Ç–Ω–∞–º",
                # –ì—Ä—É–∑–∏—è
                "–ê–¥–∂–∞—Ä–∏—è-–ë–∞—Ç—É–º–∏": "–ì—Ä—É–∑–∏—è",
                "–ë–∞–∫—É—Ä–∏–∞–Ω–∏": "–ì—Ä—É–∑–∏—è",
                "–ë–æ—Ä–∂–æ–º–∏": "–ì—Ä—É–∑–∏—è",
                "–ì—É–¥–∞—É—Ä–∏": "–ì—Ä—É–∑–∏—è",
                "–ì—É—Ä–∏—è-–£—Ä–µ–∫–∏": "–ì—Ä—É–∑–∏—è",
                "–ò–º–µ—Ä–µ—Ç–∏-–ö—É—Ç–∞–∏—Å–∏": "–ì—Ä—É–∑–∏—è",
                "–ö–∞—Ö–µ—Ç–∏—è": "–ì—Ä—É–∑–∏—è",
                "–°–∞–∏—Ä–º–µ": "–ì—Ä—É–∑–∏—è",
                "–°–≤–∞–Ω–µ—Ç–∏—è": "–ì—Ä—É–∑–∏—è",
                "–¢–±–∏–ª–∏—Å–∏": "–ì—Ä—É–∑–∏—è",
                # –ò–Ω–¥–æ–Ω–µ–∑–∏—è
                "–ë–∞–ª–∏": "–ò–Ω–¥–æ–Ω–µ–∑–∏—è",
                # –ö–∞—Ç–∞—Ä
                "–î–æ—Ö–∞": "–ö–∞—Ç–∞—Ä",
                # –ú–∞–ª–∞–π–∑–∏—è
                "–ö—É–∞–ª–∞-–õ—É–º–ø—É—Ä": "–ú–∞–ª–∞–π–∑–∏—è",
                "–ü–∏–Ω–∞–Ω–≥": "–ú–∞–ª–∞–π–∑–∏—è",
                # –ú–∞–ª—å–¥–∏–≤—ã
                "–ú–∞–ª—å–¥–∏–≤—ã": "–ú–∞–ª—å–¥–∏–≤—ã",
                # –û–ê–≠
                "–î—É–±–∞–π": "–û–ê–≠",
                "–ê–±—É-–î–∞–±–∏": "–û–ê–≠",
                "–®–∞—Ä–¥–∂–∞": "–û–ê–≠",
                "–ê–¥–∂–º–∞–Ω": "–û–ê–≠",
                "–ê–ª—å-–ê–π–Ω": "–û–ê–≠",
                "–†–∞—Å –ê–ª—å –•–∞–π–º–∞": "–û–ê–≠",
                "–£–º –ê–ª—å –ö—É–≤–µ–π–Ω": "–û–ê–≠",
                "–§—É–¥–∂–µ–π—Ä–∞": "–û–ê–≠",
                # –°–∏–Ω–≥–∞–ø—É—Ä
                "–°–∏–Ω–≥–∞–ø—É—Ä": "–°–∏–Ω–≥–∞–ø—É—Ä",
                # –°–ª–æ–≤–µ–Ω–∏—è
                "–°–ª–æ–≤–µ–Ω–∏—è": "–°–ª–æ–≤–µ–Ω–∏—è",
                # –¢–∞–∏–ª–∞–Ω–¥
                "–ü—Ö—É–∫–µ—Ç": "–¢–∞–∏–ª–∞–Ω–¥",
                "–ë–∞–Ω–≥–∫–æ–∫": "–¢–∞–∏–ª–∞–Ω–¥",
                "–°–∞–º—É–∏": "–¢–∞–∏–ª–∞–Ω–¥",
                "–ö–∞–æ –õ–∞–∫": "–¢–∞–∏–ª–∞–Ω–¥",
                "–ö–æ –ß–∞–Ω–≥": "–¢–∞–∏–ª–∞–Ω–¥",
                "–ö—Ä–∞–±–∏": "–¢–∞–∏–ª–∞–Ω–¥",
                "–ü–∞—Ç—Ç–∞–π—è": "–¢–∞–∏–ª–∞–Ω–¥",
                "–ü—Ö–∞–Ω–≥ –ù–≥–∞": "–¢–∞–∏–ª–∞–Ω–¥",
                "–†–∞–π–æ–Ω–≥": "–¢–∞–∏–ª–∞–Ω–¥",
                "–°–∞–º–µ–¥": "–¢–∞–∏–ª–∞–Ω–¥",
                # –¢—É—Ä—Ü–∏—è
                "–ê–ª–∞–Ω–∏—è": "–¢—É—Ä—Ü–∏—è",
                "–ê–Ω—Ç–∞–ª—å—è": "–¢—É—Ä—Ü–∏—è",
                "–ë–µ–ª–µ–∫": "–¢—É—Ä—Ü–∏—è",
                "–ë–æ–¥—Ä—É–º": "–¢—É—Ä—Ü–∏—è",
                "–î–∏–¥–∏–º": "–¢—É—Ä—Ü–∏—è",
                "–ö–∞—à": "–¢—É—Ä—Ü–∏—è",
                "–ö–µ–º–µ—Ä": "–¢—É—Ä—Ü–∏—è",
                "–ö—É—à–∞–¥–∞—Å—ã": "–¢—É—Ä—Ü–∏—è",
                "–ú–∞—Ä–º–∞—Ä–∏—Å": "–¢—É—Ä—Ü–∏—è",
                "–°–∏–¥–µ": "–¢—É—Ä—Ü–∏—è",
                "–°—Ç–∞–º–±—É–ª": "–¢—É—Ä—Ü–∏—è",
                "–§–µ—Ç—Ö–∏–µ": "–¢—É—Ä—Ü–∏—è",
                "–≠–∫—Å–∫—É—Ä—Å–∏–æ–Ω–Ω—ã–µ –¢—É—Ä—ã": "–¢—É—Ä—Ü–∏—è",
                # –ß–µ—Ä–Ω–æ–≥–æ—Ä–∏—è
                "–ß–µ—Ä–Ω–æ–≥–æ—Ä–∏—è": "–ß–µ—Ä–Ω–æ–≥–æ—Ä–∏—è",
                # –ß–µ—Ö–∏—è
                "–ö–∞—Ä–ª–æ–≤—ã –í–∞—Ä—ã": "–ß–µ—Ö–∏—è",
                "–ú–∞—Ä–∏–∞–Ω—Å–∫–∏–µ –õ–∞–∑–Ω–µ": "–ß–µ—Ö–∏—è",
                "–ü—Ä–∞–≥–∞": "–ß–µ—Ö–∏—è",
                "–¢–µ–ø–ª–∏—Ü–µ": "–ß–µ—Ö–∏—è",
                "–Ø—Ö–∏–º–æ–≤": "–ß–µ—Ö–∏—è",
                # –®—Ä–∏-–õ–∞–Ω–∫–∞
                "–®—Ä–∏-–õ–∞–Ω–∫–∞": "–®—Ä–∏-–õ–∞–Ω–∫–∞",
                # –Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è
                "–ö–æ—Ä–µ—è": "–Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è",
                "–°–µ—É–ª": "–Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è"
            }

            country = destination_to_country.get(destination_clean, destination_clean)

            price = price_raw.replace(" KZT", "").replace(" ", "")
            date_std = normalize_date_to_standard(date_raw)
            if not date_std:
                continue

            rec_new = {
                "hotel": hotel_name_raw,
                "city": city,
                "country": country,
                "meal": meal,
                "nights": nights,
                "seats": seats if seats else "-",
                "price": price,  # –ø–µ—Ä–µ—Å—á—ë—Ç –Ω–∏–∂–µ –≤–æ–∑–º–æ–∂–µ–Ω
                "old_price": "",
                "discount_percent": "",
                "price_per_month": "",
                "installment_months": "",
                "image": "",
                "gallery": [],
                "description": "",
                "dates_prices": [{"date": date_std, "price": price}],
            }

            # –†–∞—Å—á—ë—Ç—ã —Ü–µ–Ω (–∫–∞–∫ —É —Ç–µ–±—è –±—ã–ª–æ)
            try:
                price_int = int(price)
                old_price = round(price_int / 0.8)
                final_price = round(price_int * 1.12)
                price_per_month = round(final_price / 12)
                rec_new["old_price"] = str(old_price)
                rec_new["discount_percent"] = "20"
                rec_new["installment_months"] = "12"
                rec_new["price_per_month"] = str(price_per_month)
            except Exception as e:
                logger.info(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ —Ü–µ–Ω—ã: {e}")

            hotels_parsed.append(rec_new)
            count_added_rows += 1
            logger.info(f"‚ûï –û—Ç–µ–ª—å: {hotel_name_raw} | –î–∞—Ç–∞: {date_std} | –¶–µ–Ω–∞: {price}")

            if limit and count_added_rows >= limit:
                logger.info(f"‚õî –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç {limit}, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥.")
                break

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏: {e}")
            continue

# ----------------------- –ú–ï–†–î–ñ –° –°–£–©–ï–°–¢–í–£–Æ–©–ò–ú–ò -----------------------

# –ò–Ω–¥–µ–∫—Å —Å–≤–µ–∂–µ–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –ø–æ –∫–ª—é—á—É
parsed_index = {}
for rec in hotels_parsed:
    k = make_key(rec)
    if k not in parsed_index:
        parsed_index[k] = rec
    else:
        # –æ–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞—Ç—ã, –µ—Å–ª–∏ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –∫–ª—é—á –≤—Å—Ç—Ä–µ—Ç–∏–ª—Å—è –±–æ–ª—å—à–µ —Ä–∞–∑–∞
        for dp in rec.get("dates_prices", []):
            d = normalize_date_to_standard(dp.get("date"))
            if not d:
                continue
            existing_dp = next((x for x in parsed_index[k]["dates_prices"] if normalize_date_to_standard(x["date"]) == d), None)
            if existing_dp:
                existing_dp["price"] = str(dp.get("price", existing_dp.get("price", "")))
            else:
                parsed_index[k]["dates_prices"].append({"date": d, "price": str(dp.get("price", ""))})

# –¢–µ–ø–µ—Ä—å —Å—à–∏–≤–∞–µ–º parsed_index –≤ existing_index
for k, new_rec in parsed_index.items():
    if k in existing_index:
        base = existing_index[k]
        # dates_prices: –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ –¥–∞—Ç–∞–º
        base.setdefault("dates_prices", [])
        ensure_dates_prices_standard(base)

        for dp in new_rec.get("dates_prices", []):
            d = normalize_date_to_standard(dp.get("date"))
            if not d:
                continue
            price = str(dp.get("price", ""))

            ex = next((x for x in base["dates_prices"] if normalize_date_to_standard(x.get("date")) == d), None)
            if ex:
                if str(ex.get("price", "")) != price:
                    ex["price"] = price  # –æ–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –Ω–∞ —Å–≤–µ–∂—É—é
            else:
                base["dates_prices"].append({"date": d, "price": price})

        # –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å ¬´–≤–∏—Ç—Ä–∏–Ω–Ω—ã–µ¬ª –ø–æ–ª—è (—Ü–µ–Ω—ã/—Å–∫–∏–¥–∫–∏/—Ä–∞—Å—Å—Ä–æ—á–∫—É) –∏–∑ —Å–≤–µ–∂–µ–π –∑–∞–ø–∏—Å–∏
        for fld in ("price", "old_price", "discount_percent", "price_per_month", "installment_months", "seats"):
            if new_rec.get(fld):
                base[fld] = new_rec[fld]

        # –ø–µ—Ä–µ—Å—á—ë—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ price –∫–∞–∫ –º–∏–Ω–∏–º—É–º–∞
        recompute_primary_price(base)

    else:
        # –ù–æ–≤—ã–π —Ç—É—Ä ‚Äî –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º
        existing_index[k] = new_rec
        # –∏ —Ç–æ–∂–µ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞—Ç—ã –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        ensure_dates_prices_standard(existing_index[k])
        recompute_primary_price(existing_index[k])
        logger.info(f"üÜï –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ç—É—Ä: {new_rec.get('hotel','')}")

final_results = list(existing_index.values())

# ----------------------- –ü–†–ò–°–í–û–ï–ù–ò–ï ID -----------------------

existing_ids = set()
for item in final_results:
    if isinstance(item.get("id"), int):
        existing_ids.add(item["id"])

next_id = max(existing_ids, default=0) + 1
for hotel in final_results:
    if "id" not in hotel or not isinstance(hotel["id"], int):
        hotel["id"] = next_id
        next_id += 1

# ----------------------- –°–û–•–†–ê–ù–ï–ù–ò–ï -----------------------

with open(filter_path, "w", encoding="utf-8") as f:
    json.dump(final_results, f, indent=2, ensure_ascii=False)

logger.info(f"‚úÖ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ {len(final_results)} —Ç—É—Ä–æ–≤ (–º–µ—Ä–¥–∂ –ø–æ –∫–ª—é—á—É country|city|hotel|meal|nights).")
print(f"–ì–æ—Ç–æ–≤–æ: {len(final_results)} —Ç—É—Ä–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ filter.json")
