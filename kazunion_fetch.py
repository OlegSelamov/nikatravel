import subprocess
import os
import json
import logging
import requests,os
import threading
from flask import Flask, request
from datetime import datetime
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ ‚Äî –ª–æ–≥-—Ñ–∞–π–ª –æ–±—â–∏–π
logging.basicConfig(
    filename="parser.log",
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

def generate_test_json():
    logging.info("üì¶ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–≥–ª—É—à–∫–∞. –°–æ–∑–¥–∞—ë–º filter.json")
    test_data = [{
        "departure_date": datetime.now().strftime("%Y-%m-%d"),
        "city": "–ê–ª–º–∞—Ç—ã",
        "country": "–¢—É—Ä—Ü–∏—è",
        "hotel": "Test Hotel",
        "nights": "7",
        "meal": "AI",
        "seats": "–ï—Å—Ç—å",
        "price": "500000",
        "description": "–¢–µ—Å—Ç–æ–≤—ã–π —Ç—É—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.",
        "image": "test.jpg",
        "old_price": "600000",
        "discount_percent": "17",
        "price_per_month": "20833",
        "installment_months": "24"
    }]
    Path("data").mkdir(exist_ok=True)
    with open("data/filter.json", "w", encoding="utf-8") as f:
        json.dump(test_data, f, ensure_ascii=False, indent=2)

def send_to_render():
    url = os.getenv("RENDER_API_URL")
    secret = os.getenv("RENDER_SECRET_KEY")

    if not url or not secret:
        logging.error("‚ùå RENDER_API_URL –∏–ª–∏ RENDER_SECRET_KEY –Ω–µ –∑–∞–¥–∞–Ω—ã")
        return

    try:
        with open("data/filter.json", "r", encoding="utf-8") as f:
            data = json.load(f)

        headers = {
            "Authorization": f"Bearer {secret}",
            "Content-Type": "application/json"
        }

        response = requests.post(url, headers=headers, json=data)

        logging.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {response.status_code} ‚Äî {response.text}")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Render: {e}")

def run():
    logging.info("üöÄ kazunion_fetch.run() –∑–∞–ø—É—â–µ–Ω")
    generate_test_json()

    # –í—ã–∑–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã —Ç–æ—á–Ω–æ –≤ Railway
    if os.getenv("PLATFORM") == "railway":
        send_to_render()
    else:
        logging.info("‚õî send_to_render() –Ω–µ –≤—ã–∑–≤–∞–Ω ‚Äî –Ω–µ Railway")

app = Flask(__name__)

@app.route('/run', methods=['POST'])
def remote_trigger():
    auth = request.headers.get("Authorization")
    if auth != f"Bearer {os.getenv('RAILWAY_SECRET')}":
        logging.warning("‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∫ /run")
        return "Forbidden", 403

    def background_task():
        logging.info("üöÄ kazunion_fetch.run() –∑–∞–ø—É—â–µ–Ω —É–¥–∞–ª—ë–Ω–Ω–æ")
        subprocess.run(["python", "kazunion_fetch.py"])

    threading.Thread(target=background_task).start()
    return "–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω", 200


port = int(os.environ.get("PORT", 8080))
app.run(host="0.0.0.0", port=port)


