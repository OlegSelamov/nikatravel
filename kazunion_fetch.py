
import os
import json
import logging
import requests
from datetime import datetime
from pathlib import Path

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

def generate_test_json():
    logging.info("üì¶ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–≥–ª—É—à–∫–∞. –°–æ–∑–¥–∞—ë–º filter.json")
    test_data = [{
        "departure_date": datetime.now().strftime("%Y-%m-%d"),
        "city": "–ê–ª–º–∞—Ç—ã",
        "country": "–¢—É—Ä—Ü–∏—è",
        "hotel": "Test Hotel",
        "nights": "7",
        "meal": "AI",
        "seats": "–ï—Å—Ç—å",
        "price": "500000",
        "description": "–¢–µ—Å—Ç–æ–≤—ã–π —Ç—É—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.",
        "image": "test.jpg",
        "old_price": "600000",
        "discount_percent": "17",
        "price_per_month": "20833",
        "installment_months": "24"
    }]
    Path("data").mkdir(exist_ok=True)
    with open("data/filter.json", "w", encoding="utf-8") as f:
        json.dump(test_data, f, ensure_ascii=False, indent=2)

def send_to_render():
    import requests, os, logging
    url = os.getenv("RENDER_API_URL")
    secret = os.getenv("RENDER_SECRET_KEY")
    
    logging.info(f"üì¨ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ filter.json")
    logging.info(f"üîó URL: {url}")
    logging.info(f"üîê SECRET: {secret}")
    
    if not url or not secret:
        logging.error("‚ùå RENDER_API_URL –∏–ª–∏ RENDER_SECRET_KEY –Ω–µ –∑–∞–¥–∞–Ω—ã")
        return

    headers = {"Authorization": f"Bearer {secret}"}
    try:
        with open("data/filter.json", "rb") as f:
            response = requests.post(url, data=f, headers=headers)
        logging.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {response.status_code} ‚Äî {response.text}")
    except Exception as e:
        logging.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

def run():
    logging.info("üöÄ kazunion_fetch.run() –∑–∞–ø—É—â–µ–Ω")
    generate_test_json()

    # –í—ã–∑–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã —Ç–æ—á–Ω–æ –≤ Railway
    if os.getenv("PLATFORM") == "railway":
        send_to_render()
    else:
        logging.info("‚õî send_to_render() –Ω–µ –≤—ã–∑–≤–∞–Ω ‚Äî –Ω–µ Railway")

if __name__ == "__main__":
    run()
