import os
import json
import logging
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

def send_to_render():
    logger.info("üì¨ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ filter.json")

    render_url = os.getenv("RENDER_API_URL")
    secret_key = os.getenv("RENDER_SECRET_KEY")

    logger.info(f"üîó URL: {render_url}")
    logger.info(f"üîê SECRET: {secret_key}")

    if not render_url or not secret_key:
        logger.error("‚ùå RENDER_API_URL –∏–ª–∏ RENDER_SECRET_KEY –Ω–µ –∑–∞–¥–∞–Ω—ã")
        return

    try:
        with open("data/filter.json", "r", encoding="utf-8") as f:
            data = json.load(f)

        response = requests.post(
            render_url,
            headers={"Authorization": f"Bearer {secret_key}"},
            json=data,
            timeout=20
        )

        logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {response.status_code} ‚Äî {response.text}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ —Å–∞–π—Ç: {e}")

def run():
    logger.info("üöÄ kazunion_fetch.run() –∑–∞–ø—É—â–µ–Ω")
    try:
        logger.info("üì¶ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–≥–ª—É—à–∫–∞. –°–æ–∑–¥–∞—ë–º filter.json")

        test_data = [{
            "image": "default.jpg",
            "hotel": "Test Hotel",
            "country": "–¢–µ—Å—Ç–ª—è–Ω–¥–∏—è",
            "price": "100000",
            "old_price": "120000",
            "discount_percent": "17",
            "price_per_month": "4166",
            "installment_months": "24",
            "departure_date": "2025-08-01",
            "city": "–ê–ª–º–∞—Ç—ã",
            "nights": "7",
            "meal": "AI",
            "seats": "–ï—Å—Ç—å",
            "description": "–¢–µ—Å—Ç–æ–≤—ã–π —Ç—É—Ä"
        }]

        os.makedirs("data", exist_ok=True)
        with open("data/filter.json", "w", encoding="utf-8") as f:
            json.dump(test_data, f, ensure_ascii=False, indent=2)

        logger.info("üì§ –í—ã–∑—ã–≤–∞–µ–º send_to_render()")
        send_to_render()
        logger.info("‚úÖ send_to_render() –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å")

    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –≤ run(): {e}")

if __name__ == "__main__":
    run()